{"version":3,"file":"index.cjs.js","sources":["../src/constants/values.ts","../src/constants/rpc.ts","../src/EthereumProvider.ts","../src/index.ts"],"sourcesContent":["export const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"ethereum_provider\";\nexport const STORAGE_KEY = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\nexport const RPC_URL = \"https://rpc.walletconnect.com/v1/\";\n","export const REQUIRED_METHODS = [\"eth_sendTransaction\", \"personal_sign\"];\nexport const OPTIONAL_METHODS = [\n  \"eth_accounts\",\n  \"eth_requestAccounts\",\n  \"eth_sendRawTransaction\",\n  \"eth_sign\",\n  \"eth_signTransaction\",\n  \"eth_signTypedData\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData_v4\",\n  \"wallet_switchEthereumChain\",\n  \"wallet_addEthereumChain\",\n  \"wallet_getPermissions\",\n  \"wallet_requestPermissions\",\n  \"wallet_registerOnboarding\",\n  \"wallet_watchAsset\",\n  \"wallet_scanQRCode\",\n];\nexport const REQUIRED_EVENTS = [\"chainChanged\", \"accountsChanged\"];\nexport const OPTIONAL_EVENTS = [\"message\", \"disconnect\", \"connect\"];\n","import { EventEmitter } from \"events\";\nimport { getAccountsFromNamespaces, getSdkError, isValidArray } from \"@walletconnect/utils\";\nimport { KeyValueStorageOptions } from \"@walletconnect/keyvaluestorage\";\nimport {\n  IEthereumProvider as IProvider,\n  IEthereumProviderEvents,\n  ProviderAccounts,\n  RequestArguments,\n} from \"./types\";\nimport { Metadata, Namespace, UniversalProvider } from \"@walletconnect/universal-provider\";\nimport type { WalletConnectModalConfig, WalletConnectModal } from \"@walletconnect/modal\";\nimport { SessionTypes, SignClientTypes } from \"@walletconnect/types\";\nimport {\n  STORAGE_KEY,\n  REQUIRED_METHODS,\n  REQUIRED_EVENTS,\n  RPC_URL,\n  OPTIONAL_METHODS,\n  OPTIONAL_EVENTS,\n} from \"./constants\";\n\nexport type QrModalOptions = Pick<\n  WalletConnectModalConfig,\n  | \"themeMode\"\n  | \"themeVariables\"\n  | \"desktopWallets\"\n  | \"enableExplorer\"\n  | \"explorerRecommendedWalletIds\"\n  | \"explorerExcludedWalletIds\"\n  | \"mobileWallets\"\n  | \"privacyPolicyUrl\"\n  | \"termsOfServiceUrl\"\n  | \"walletImages\"\n>;\n\nexport type RpcMethod =\n  | \"personal_sign\"\n  | \"eth_sendTransaction\"\n  | \"eth_accounts\"\n  | \"eth_requestAccounts\"\n  | \"eth_call\"\n  | \"eth_getBalance\"\n  | \"eth_sendRawTransaction\"\n  | \"eth_sign\"\n  | \"eth_signTransaction\"\n  | \"eth_signTypedData\"\n  | \"eth_signTypedData_v3\"\n  | \"eth_signTypedData_v4\"\n  | \"wallet_switchEthereumChain\"\n  | \"wallet_addEthereumChain\"\n  | \"wallet_getPermissions\"\n  | \"wallet_requestPermissions\"\n  | \"wallet_registerOnboarding\"\n  | \"wallet_watchAsset\"\n  | \"wallet_scanQRCode\";\n\nexport type RpcEvent = \"accountsChanged\" | \"chainChanged\" | \"message\" | \"disconnect\" | \"connect\";\n\nexport interface EthereumRpcMap {\n  [chainId: string]: string;\n}\n\nexport interface SessionEvent {\n  event: { name: string; data: any };\n  chainId: string;\n}\n\nexport interface EthereumRpcConfig {\n  chains: string[];\n  optionalChains: string[];\n  methods: string[];\n  optionalMethods?: string[];\n  /**\n   * @description Events that the wallet MUST support or the connection will be rejected\n   */\n  events: string[];\n  optionalEvents?: string[];\n  rpcMap: EthereumRpcMap;\n  projectId: string;\n  metadata?: Metadata;\n  showQrModal: boolean;\n  qrModalOptions?: QrModalOptions;\n}\nexport interface ConnectOps {\n  chains?: number[];\n  optionalChains?: number[];\n  rpcMap?: EthereumRpcMap;\n  pairingTopic?: string;\n}\n\nexport interface IEthereumProvider extends IProvider {\n  connect(opts?: ConnectOps | undefined): Promise<void>;\n}\n\nexport function getRpcUrl(chainId: string, rpc: EthereumRpcConfig): string | undefined {\n  let rpcUrl: string | undefined;\n  if (rpc.rpcMap) {\n    rpcUrl = rpc.rpcMap[getEthereumChainId([chainId])];\n  }\n  return rpcUrl;\n}\n\nexport function getEthereumChainId(chains: string[]): number {\n  return Number(chains[0].split(\":\")[1]);\n}\n\nexport function toHexChainId(chainId: number): string {\n  return `0x${chainId.toString(16)}`;\n}\n\nexport type NamespacesParams = {\n  chains: EthereumRpcConfig[\"chains\"];\n  optionalChains: EthereumRpcConfig[\"optionalChains\"];\n  methods?: EthereumRpcConfig[\"methods\"];\n  optionalMethods?: EthereumRpcConfig[\"methods\"];\n  events?: EthereumRpcConfig[\"events\"];\n  rpcMap: EthereumRpcConfig[\"rpcMap\"];\n  optionalEvents?: EthereumRpcConfig[\"events\"];\n};\n\nexport function buildNamespaces(params: NamespacesParams): {\n  required?: Namespace;\n  optional?: Namespace;\n} {\n  const { chains, optionalChains, methods, optionalMethods, events, optionalEvents, rpcMap } =\n    params;\n  if (!isValidArray(chains)) {\n    throw new Error(\"Invalid chains\");\n  }\n\n  const required: Namespace = {\n    chains,\n    methods: methods || REQUIRED_METHODS,\n    events: events || REQUIRED_EVENTS,\n    rpcMap: {\n      ...(chains.length\n        ? { [getEthereumChainId(chains)]: rpcMap[getEthereumChainId(chains)] }\n        : {}),\n    },\n  };\n\n  // make a list of events and methods that require additional permissions\n  // so we know if we should to include the required chains in the optional namespace\n  const eventsRequiringPermissions = events?.filter((event) => !REQUIRED_EVENTS.includes(event));\n  const methodsRequiringPermissions = methods?.filter((event) => !REQUIRED_METHODS.includes(event));\n\n  if (\n    !optionalChains &&\n    !optionalEvents &&\n    !optionalMethods &&\n    !eventsRequiringPermissions?.length &&\n    !methodsRequiringPermissions?.length\n  ) {\n    return { required: chains.length ? required : undefined };\n  }\n\n  /*\n   * decides whether or not to include the required chains in the optional namespace\n   * use case: if there is a single chain as required but additonal methods/events as optional\n   */\n  const shouldIncludeRequiredChains =\n    (eventsRequiringPermissions?.length && methodsRequiringPermissions?.length) || !optionalChains;\n\n  const optional: Namespace = {\n    chains: [\n      ...new Set(\n        shouldIncludeRequiredChains ? required.chains.concat(optionalChains || []) : optionalChains,\n      ),\n    ],\n    methods: [\n      ...new Set(\n        required.methods.concat(optionalMethods?.length ? optionalMethods : OPTIONAL_METHODS),\n      ),\n    ],\n    events: [...new Set(required.events.concat(optionalEvents || OPTIONAL_EVENTS))],\n    rpcMap,\n  };\n\n  return {\n    required: chains.length ? required : undefined,\n    optional: optionalChains.length ? optional : undefined,\n  };\n}\n\n// helper type to force setting at least one value in an array\ntype ArrayOneOrMore<T> = {\n  0: T;\n} & Array<T>;\n\n/**\n * @param {number[]} chains - The Chains your app intents to use and the peer MUST support. If the peer does not support these chains, the connection will be rejected.\n * @param {number[]} optionalChains - The Chains your app MAY attempt to use and the peer MAY support. If the peer does not support these chains, the connection will still be established.\n * @description either chains or optionalChains must be provided\n */\nexport type ChainsProps =\n  | {\n      chains: ArrayOneOrMore<number>;\n      optionalChains?: number[];\n    }\n  | {\n      chains?: number[];\n      optionalChains: ArrayOneOrMore<number>;\n    };\n\nexport type EthereumProviderOptions = {\n  projectId: string;\n  /**\n   * @note Methods that your app intents to use and the peer MUST support. If the peer does not support these methods, the connection will be rejected.\n   * @default [\"eth_sendTransaction\", \"personal_sign\"]\n   */\n  methods?: string[];\n  /**\n   * @note Methods that your app MAY attempt to use and the peer MAY support. If the peer does not support these methods, the connection will still be established.\n   */\n  optionalMethods?: string[];\n  events?: string[];\n  optionalEvents?: string[];\n  rpcMap?: EthereumRpcMap;\n  metadata?: Metadata;\n  showQrModal: boolean;\n  qrModalOptions?: QrModalOptions;\n  disableProviderPing?: boolean;\n  relayUrl?: string;\n  storageOptions?: KeyValueStorageOptions;\n} & ChainsProps;\n\nexport class EthereumProvider implements IEthereumProvider {\n  public events = new EventEmitter();\n  public namespace = \"eip155\";\n  public accounts: string[] = [];\n  public signer: InstanceType<typeof UniversalProvider>;\n  public chainId = 1;\n  public modal?: WalletConnectModal;\n\n  protected rpc: EthereumRpcConfig;\n  protected readonly STORAGE_KEY = STORAGE_KEY;\n\n  constructor() {\n    // assigned during initialize\n    this.signer = {} as InstanceType<typeof UniversalProvider>;\n    this.rpc = {} as EthereumRpcConfig;\n  }\n\n  static async init(opts: EthereumProviderOptions): Promise<EthereumProvider> {\n    const provider = new EthereumProvider();\n    await provider.initialize(opts);\n    return provider;\n  }\n\n  public async request<T = unknown>(args: RequestArguments): Promise<T> {\n    return await this.signer.request(args, this.formatChainId(this.chainId));\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: any) => void,\n  ): void {\n    this.signer.sendAsync(args, callback, this.formatChainId(this.chainId));\n  }\n\n  get connected(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connected;\n  }\n\n  get connecting(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connecting;\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.session) await this.connect();\n    const accounts = await this.request({ method: \"eth_requestAccounts\" });\n    return accounts as ProviderAccounts;\n  }\n\n  public async connect(opts?: ConnectOps): Promise<void> {\n    if (!this.signer.client) {\n      throw new Error(\"Provider not initialized. Call init() first\");\n    }\n\n    this.loadConnectOpts(opts);\n    const { required, optional } = buildNamespaces(this.rpc);\n    try {\n      const session = await new Promise<SessionTypes.Struct | undefined>(\n        async (resolve, reject) => {\n          if (this.rpc.showQrModal) {\n            this.modal?.subscribeModal((state) => {\n              // the modal was closed so reject the promise\n              if (!state.open && !this.signer.session) {\n                this.signer.abortPairingAttempt();\n                reject(new Error(\"Connection request reset. Please try again.\"));\n              }\n            });\n          }\n          await this.signer\n            .connect({\n              namespaces: {\n                ...(required && {\n                  [this.namespace]: required,\n                }),\n              },\n              ...(optional && {\n                optionalNamespaces: {\n                  [this.namespace]: optional,\n                },\n              }),\n              pairingTopic: opts?.pairingTopic,\n            })\n            .then((session) => {\n              resolve(session);\n            })\n            .catch((error: Error) => {\n              reject(new Error(error.message));\n            });\n        },\n      );\n      if (!session) return;\n\n      const accounts = getAccountsFromNamespaces(session.namespaces, [this.namespace]);\n      // if no required chains are set, use the approved accounts to fetch chainIds\n      this.setChainIds(this.rpc.chains.length ? this.rpc.chains : accounts);\n      this.setAccounts(accounts);\n      this.events.emit(\"connect\", { chainId: toHexChainId(this.chainId) });\n    } catch (error) {\n      this.signer.logger.error(error);\n      throw error;\n    } finally {\n      if (this.modal) this.modal.closeModal();\n    }\n  }\n\n  public async disconnect(): Promise<void> {\n    if (this.session) {\n      await this.signer.disconnect();\n    }\n    this.reset();\n  }\n\n  public on: IEthereumProviderEvents[\"on\"] = (event, listener) => {\n    this.events.on(event, listener);\n    return this;\n  };\n\n  public once: IEthereumProviderEvents[\"once\"] = (event, listener) => {\n    this.events.once(event, listener);\n    return this;\n  };\n\n  public removeListener: IEthereumProviderEvents[\"removeListener\"] = (event, listener) => {\n    this.events.removeListener(event, listener);\n    return this;\n  };\n\n  public off: IEthereumProviderEvents[\"off\"] = (event, listener) => {\n    this.events.off(event, listener);\n    return this;\n  };\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  get session() {\n    return this.signer.session;\n  }\n\n  // ---------- Protected --------------------------------------------- //\n\n  protected registerEventListeners() {\n    this.signer.on(\"session_event\", (payload: SignClientTypes.EventArguments[\"session_event\"]) => {\n      const { params } = payload;\n      const { event } = params;\n      if (event.name === \"accountsChanged\") {\n        this.accounts = this.parseAccounts(event.data);\n        this.events.emit(\"accountsChanged\", this.accounts);\n      } else if (event.name === \"chainChanged\") {\n        this.setChainId(this.formatChainId(event.data));\n      } else {\n        this.events.emit(event.name as any, event.data);\n      }\n      this.events.emit(\"session_event\", payload);\n    });\n\n    this.signer.on(\"chainChanged\", (chainId: string) => {\n      const chain = parseInt(chainId);\n      this.chainId = chain;\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    });\n\n    this.signer.on(\n      \"session_update\",\n      (payload: SignClientTypes.EventArguments[\"session_update\"]) => {\n        this.events.emit(\"session_update\", payload);\n      },\n    );\n\n    this.signer.on(\n      \"session_delete\",\n      (payload: SignClientTypes.EventArguments[\"session_delete\"]) => {\n        this.reset();\n        this.events.emit(\"session_delete\", payload);\n        this.events.emit(\"disconnect\", {\n          ...getSdkError(\"USER_DISCONNECTED\"),\n          data: payload.topic,\n          name: \"USER_DISCONNECTED\",\n        });\n      },\n    );\n\n    this.signer.on(\"display_uri\", (uri: string) => {\n      if (this.rpc.showQrModal) {\n        // to refresh the QR we have to close the modal and open it again\n        // until proper API is provided by walletconnect modal\n        this.modal?.closeModal();\n        this.modal?.openModal({ uri });\n      }\n      this.events.emit(\"display_uri\", uri);\n    });\n  }\n\n  protected switchEthereumChain(chainId: number): void {\n    this.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: chainId.toString(16) }],\n    });\n  }\n\n  protected isCompatibleChainId(chainId: string): boolean {\n    return typeof chainId === \"string\" ? chainId.startsWith(`${this.namespace}:`) : false;\n  }\n\n  protected formatChainId(chainId: number): string {\n    return `${this.namespace}:${chainId}`;\n  }\n\n  protected parseChainId(chainId: string): number {\n    return Number(chainId.split(\":\")[1]);\n  }\n\n  protected setChainIds(chains: string[]) {\n    const compatible = chains.filter((x) => this.isCompatibleChainId(x));\n    const chainIds = compatible.map((c) => this.parseChainId(c));\n    if (chainIds.length) {\n      this.chainId = chainIds[0];\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    }\n  }\n\n  protected setChainId(chain: string) {\n    if (this.isCompatibleChainId(chain)) {\n      const chainId = this.parseChainId(chain);\n      this.chainId = chainId;\n      this.switchEthereumChain(chainId);\n    }\n  }\n\n  protected parseAccountId(account: string): { chainId: string; address: string } {\n    const [namespace, reference, address] = account.split(\":\");\n    const chainId = `${namespace}:${reference}`;\n    return { chainId, address };\n  }\n\n  protected setAccounts(accounts: string[]) {\n    this.accounts = accounts\n      .filter((x) => this.parseChainId(this.parseAccountId(x).chainId) === this.chainId)\n      .map((x) => this.parseAccountId(x).address);\n    this.events.emit(\"accountsChanged\", this.accounts);\n  }\n\n  protected getRpcConfig(opts: EthereumProviderOptions): EthereumRpcConfig {\n    const requiredChains = opts?.chains ?? [];\n    const optionalChains = opts?.optionalChains ?? [];\n    const allChains = requiredChains.concat(optionalChains);\n    if (!allChains.length)\n      throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n    const requiredMethods = requiredChains.length ? opts?.methods || REQUIRED_METHODS : [];\n    const requiredEvents = requiredChains.length ? opts?.events || REQUIRED_EVENTS : [];\n    const optionalMethods = opts?.optionalMethods || [];\n    const optionalEvents = opts?.optionalEvents || [];\n    const rpcMap = opts?.rpcMap || this.buildRpcMap(allChains, opts.projectId);\n    const qrModalOptions = opts?.qrModalOptions || undefined;\n    return {\n      chains: requiredChains?.map((chain) => this.formatChainId(chain)),\n      optionalChains: optionalChains.map((chain) => this.formatChainId(chain)),\n      methods: requiredMethods,\n      events: requiredEvents,\n      optionalMethods,\n      optionalEvents,\n      rpcMap,\n      showQrModal: Boolean(opts?.showQrModal),\n      qrModalOptions,\n      projectId: opts.projectId,\n      metadata: opts.metadata,\n    };\n  }\n\n  protected buildRpcMap(chains: number[], projectId: string): EthereumRpcMap {\n    const map: EthereumRpcMap = {};\n    chains.forEach((chain) => {\n      map[chain] = this.getRpcUrl(chain, projectId);\n    });\n    return map;\n  }\n\n  protected async initialize(opts: EthereumProviderOptions) {\n    this.rpc = this.getRpcConfig(opts);\n    this.chainId = this.rpc.chains.length\n      ? getEthereumChainId(this.rpc.chains)\n      : getEthereumChainId(this.rpc.optionalChains);\n    this.signer = await UniversalProvider.init({\n      projectId: this.rpc.projectId,\n      metadata: this.rpc.metadata,\n      disableProviderPing: opts.disableProviderPing,\n      relayUrl: opts.relayUrl,\n      storageOptions: opts.storageOptions,\n    });\n    this.registerEventListeners();\n    await this.loadPersistedSession();\n    if (this.rpc.showQrModal) {\n      let WalletConnectModalClass;\n      try {\n        const { WalletConnectModal } = await import(\"@walletconnect/modal\");\n        WalletConnectModalClass = WalletConnectModal;\n      } catch {\n        throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\n      }\n      if (WalletConnectModalClass) {\n        try {\n          this.modal = new WalletConnectModalClass({\n            walletConnectVersion: 2,\n            projectId: this.rpc.projectId,\n            standaloneChains: this.rpc.chains,\n            ...this.rpc.qrModalOptions,\n          });\n        } catch (e) {\n          this.signer.logger.error(e);\n          throw new Error(\"Could not generate WalletConnectModal Instance\");\n        }\n      }\n    }\n  }\n\n  protected loadConnectOpts(opts?: ConnectOps) {\n    if (!opts) return;\n    const { chains, optionalChains, rpcMap } = opts;\n    if (chains && isValidArray(chains)) {\n      this.rpc.chains = chains.map((chain) => this.formatChainId(chain));\n      chains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n    if (optionalChains && isValidArray(optionalChains)) {\n      this.rpc.optionalChains = [];\n      this.rpc.optionalChains = optionalChains?.map((chain) => this.formatChainId(chain));\n      optionalChains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n  }\n\n  protected getRpcUrl(chainId: number, projectId?: string): string {\n    const providedRpc = this.rpc.rpcMap?.[chainId];\n    return (\n      providedRpc ||\n      `${RPC_URL}?chainId=eip155:${chainId}&projectId=${projectId || this.rpc.projectId}`\n    );\n  }\n\n  protected async loadPersistedSession() {\n    if (!this.session) return;\n    const chainId = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`);\n\n    // cater to both inline & nested namespace formats\n    const namespace = this.session.namespaces[`${this.namespace}:${chainId}`]\n      ? this.session.namespaces[`${this.namespace}:${chainId}`]\n      : this.session.namespaces[this.namespace];\n\n    this.setChainIds(chainId ? [this.formatChainId(chainId)] : namespace?.accounts);\n    this.setAccounts(namespace?.accounts);\n  }\n\n  protected reset() {\n    this.chainId = 1;\n    this.accounts = [];\n  }\n\n  protected persist() {\n    if (!this.session) return;\n    this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);\n  }\n\n  protected parseAccounts(payload: string | string[]): string[] {\n    if (typeof payload === \"string\" || payload instanceof String) {\n      return [this.parseAccount(payload)];\n    }\n    return payload.map((account: string) => this.parseAccount(account));\n  }\n\n  protected parseAccount = (payload: any): string => {\n    return this.isCompatibleChainId(payload) ? this.parseAccountId(payload).address : payload;\n  };\n}\n\nexport default EthereumProvider;\n","import { EthereumProvider as Provider } from \"./EthereumProvider\";\nexport const EthereumProvider = Provider;\nexport type { RpcEvent, RpcMethod } from \"./EthereumProvider\";\nexport * from \"./constants/rpc\";\nexport default Provider;\n"],"names":["chains","chainId","params","optionalChains","methods","optionalMethods","events","optionalEvents","rpcMap","isValidArray","required","REQUIRED_METHODS","REQUIRED_EVENTS","__spreadValues","eventsRequiringPermissions","event","methodsRequiringPermissions","shouldIncludeRequiredChains","optional","OPTIONAL_METHODS","OPTIONAL_EVENTS","EthereumProvider","EventEmitter","STORAGE_KEY","listener","payload","opts","provider","args","callback","session","resolve","reject","_a","state","__spreadProps","error","accounts","getAccountsFromNamespaces","chain","getSdkError","uri","_b","chainIds","x","c","account","namespace","reference","address","requiredChains","allChains","requiredMethods","requiredEvents","qrModalOptions","projectId","map","UniversalProvider","WalletConnectModalClass","WalletConnectModal","e","RPC_URL","Provider"],"mappings":"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"}